{"version":3,"sources":["components/layout/Navbar.jsx","components/ProjectCard.jsx","consts.js","components/pages/Home.jsx","components/projects/DesktopApp.jsx","components/projects/MetaInfo.jsx","components/pages/CreateProject.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","id","href","ProjectCard","props","name","type","description","ProjectType","Home","style","fontWeight","marginTop","marginBottom","language","DesktopApp","onChange","project","placeholder","htmlFor","for","class","MetaInfo","summary","developerName","updateContact","content","CreateProject","useState","setProject","e","target","val","value","path","render","App","exact","component","HomePage","CreateProjectPage","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc718de9.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <div className='nav-wrapper indigo darken-4'>\n        <Link to='/' className='brand-logo'>\n          Metainfo Generator\n        </Link>\n        <ul id='nav-mobile' className='right hide-on-med-and-down'>\n          <li>\n            <a href='https://www.freedesktop.org/software/appstream/docs/'>Specifications</a>\n          </li>\n          <li>\n            <a href='https://github.com/bilelmoussaoui/metainfo-generator'>Source Code</a>\n          </li>\n          <li>\n            <a href='collapsible.html'>About</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst ProjectCard = props => {\n  const { name, type, description } = props\n  return (\n    <div className='col s12 m3'>\n      <div className='card small indigo'>\n        <div className='card-content white-text'>\n          <Link className='white-text' to={`/new/${type}`}>\n            <h3 className='card-title'>{name}</h3>\n          </Link>\n          <p>{description}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectCard\n","export const ProjectType = {\n  DesktopApp: 'desktop-application',\n  CliApp: 'console-application',\n  WebApp: 'web-application',\n  Service: 'service',\n  Addon: 'addon',\n  IconTheme: 'icon-theme',\n  Codec: 'codec',\n  Driver: 'driver',\n  Runtime: 'runtime',\n  Localization: 'localization',\n  Font: 'font',\n  Firmware: 'firmware',\n  InputMethod: 'inputmethod',\n  OperatingSystem: 'operating-system',\n  Repository: 'repository',\n}\n","import React from 'react'\n\nimport ProjectCard from './../ProjectCard'\nimport { ProjectType } from './../../consts'\nimport Highlight from 'react-highlight.js'\n\nconst content = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Bilal Elmoussaoui 2019 <bilal.elmoussaoui@gnome.org> -->\n<component type=\"desktop-application\">\n  <id>org.gnome.design.Contrast</id>\n  <metadata_license>CC0</metadata_license>\n  <project_license>GPL-3.0+</project_license>\n  <name>Contrast</name>\n  <summary>Check contrast between two colors</summary>\n  <description>\n    <p>Contrast checks whether the contrast between two colors meet the WCAG requirements.</p>\n  </description>\n  <screenshots>\n    <screenshot type=\"default\">\n      <image>https://gitlab.gnome.org/World/design/contrast/raw/master/data/resources/screenshots/screenshot1.png</image>\n      <caption>Main Window</caption>\n    </screenshot>\n  </screenshots>\n  <url type=\"homepage\">https://gitlab.gnome.org/World/design/contrast</url>\n  <url type=\"bugtracker\">https://gitlab.gnome.org/World/design/contrast/issues</url>\n  <url type=\"donation\">https://liberapay.com/bielmoussaoui</url>\n  <url type=\"translate\">https://l10n.gnome.org/module/contrast/</url>\n  <content_rating type=\"oars-1.0\" />\n  <releases>\n    <release version=\"0.0.2\" date=\"2019-08-25\">\n      <description>\n        <p>Translations updates</p>\n      </description>\n    </release>\n    <release version=\"0.0.1\" date=\"2019-08-07\">\n      <description>\n        <p>First release of Contrast</p>\n      </description>\n    </release>\n  </releases>\n  <kudos>\n    <kudo>ModernToolkit</kudo>\n    <kudo>HiDpiIcon</kudo>\n  </kudos>\n  <developer_name>Bilal Elmoussaoui</developer_name>\n  <update_contact>bilal.elmoussaoui@gnome.org</update_contact>\n  <translation type=\"gettext\">contrast</translation>\n  <launchable type=\"desktop-id\">org.gnome.design.Contrast.desktop</launchable>\n</component>`\nconst Home = () => {\n  return (\n    <div className='container'>\n\n        <h3 style={{fontWeight: '800', marginTop: '40px', marginBottom: '40px'}} className='center-align'>What's a Metainfo file?</h3>\n\n      <p>\n        AppStream is a cross-distro effort for enhancing the metadata available about software components in the Linux and free-software ecosystem. One of the project's goals is to make building software-center applications possible, and make interaction with the package sources of a distribution smarter. AppStream provides specifications for meta-information which is shipped by upstream projects and can be consumed by other software. The meta-information includes data which is interesting to display in software centers and is mainly useful for end-users, as well as descriptions about the public interfaces a software component provides, which is mainly useful for developers, 3rd-party software installers and for automatically installing missing components on a distribution, for example missing firmware or mimetype-handlers. \n      </p>\n\n      A metainfo is usually installed under \n      <Highlight language='bash'>$prefix/$datadir/metainfo</Highlight>\n\n        <h3 style={{fontWeight: '800', marginTop: '80px', marginBottom: '40px'}} className='center-align'>Select a component</h3>\n\n        <div>\n          <div className='row'>\n            <ProjectCard\n              name='Desktop Application'\n              type={ProjectType.DesktopApp}\n              description='A desktop application is an application which has a graphical user interface and is commonly used with mouse and keyboard. It also ships a Freedesktop .desktop file to be visible in application menus. '\n            />\n            <ProjectCard name='CLI Application' type={ProjectType.CliApp} description='A console application is any application that has a command-line or text-based interface and is designed to be used by a human user on the command line.' />\n            <ProjectCard name='Web Application' type={ProjectType.WebApp} description='A web application is an application running remotely that is accessed via a web browser and built on the web platform. '/>\n            <ProjectCard name='Service' type={ProjectType.Service} description='A service component is any software that is started and supervised by the Operating Systems \"init\" facility, such as systemd.' />\n            <ProjectCard name='Addon' type={ProjectType.Addon} description='Some components are not standalone, but rather extend existing software installed on the system and can only be used together with it. The addon component type exists to reflect that.'/>\n            <ProjectCard name='Font' type={ProjectType.Font} description=' A software center can allow users to install additional fonts using font metadata'/>\n            <ProjectCard name='Icon Theme' type={ProjectType.IconTheme} description='Icon themes as defined in the Freedesktop Icon Theme Specification can contain icon-theme metainfo files to be installed by software centers' />\n            <ProjectCard name='Codec' type={ProjectType.Codec} description='Software centers might want to special-case codec handling.' />\n            <ProjectCard name='Driver' type={ProjectType.Driver} description='The driver component type describes drivers for hardware devices as well as other Linux kernel drivers for e.g. virtualization support' />\n            <ProjectCard name='Localization' type={ProjectType.Localization} description='The localization component type describes language packs for individual software components or groups of software components' />\n            <ProjectCard name='Runtime' type={ProjectType.Runtime} description='Components of type runtime describe a collection of interdependent software components that are required to run other software' />\n            <ProjectCard name='Firmware' type={ProjectType.Firmware} description='Device firmware can be accompanied by AppStream upstream metadata, to be incorporated by a distribution. Tools like fwupd make use of this metadata to automatically update flashed firmware of devices found in the machine.' />\n            <ProjectCard name='Input Method' type={ProjectType.InputMethod} description='It is a nice feature for a software center to allows users the installation of additional input methods.' />\n            <ProjectCard name='Repository' type={ProjectType.Repository} description='A repository component describes a remote archive of digital content, usually other software or additional data (e.g. themes, icons, books, music, ...). Upon installation of a component of this type, the repective repository is added to the system and activated, letting the user access the new content.' />\n\n            <ProjectCard\n              name='Operating System'\n              type={ProjectType.OperatingSystem}\n              description='The operating-system component type describes a whole operating system such as GNU/Linux distributions like Debian, Fedora, RHEL, etc. or Windows and macOS.'\n            />\n          </div>\n        </div>\n\n        <h3 style={{fontWeight: '800', marginTop: '80px', marginBottom: '40px'}} className='center-align'>Examples of metainfo files</h3>\n        <Highlight language='xml'>{content}</Highlight>\n      </div>\n  )\n}\n\nexport default Home\n","import React, { useState } from 'react'\n\nconst DesktopApp = props => {\n  const { onChange, project } = props\n  return (\n    <div className='row'>\n      <form className='col s12'>\n        <div className='row'>\n          <div className='input-field col s6'>\n            <input\n              placeholder='com.website.myapp'\n              type='text'\n              name='id'\n              onChange={onChange}\n            />\n            <label htmlFor='id'>ID</label>\n          </div>\n          <div className='input-field col s6'>\n            <input\n              placeholder='My App'\n              name='name'\n              type='text'\n              onChange={onChange}\n            />\n            <label for='name'>Name</label>\n          </div>\n        </div>\n        <div class='row'>\n          <div class='input-field col s12'>\n            <textarea\n              name='summary'\n              class='materialize-textarea'\n              onChange={onChange}\n            />\n            <label htmlFor='summary'>Summary</label>\n          </div>\n        </div>\n\n        <div class='row'>\n          <div class='input-field col s12'>\n            <textarea\n              name='description'\n              class='materialize-textarea'\n              onChange={onChange}\n            />\n            <label htmlFor='description'>Description</label>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='input-field col s6'>\n            <input\n              placeholder='The name of the developer(s)'\n              type='text'\n              name='developerName'\n              onChange={onChange}\n            />\n            <label htmlFor='developerName'>Developer Name</label>\n          </div>\n          <div className='input-field col s6'>\n            <input\n              placeholder='update@email.me'\n              name='updateContact'\n              type='email'\n              onChange={onChange}\n            />\n            <label for='updateContact'>Update Contact</label>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default DesktopApp\n","import React, { Component } from 'react'\nimport Highlight from 'react-highlight.js'\nconst MetaInfo = props => {\n  const { project, type } = props\n  const {\n    id,\n    name,\n    summary,\n    description,\n    developerName,\n    updateContact\n  } = project\n  const content = `​​<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<component type='${type}'>\n    <id>${id}</id>\n    <launchable type=\"desktop-id\">${id}.desktop</launchable>\n    <name>${name}</name>\n    <summary>${summary}</summary>\n    <description>${description}</description>\n    <developer_name>${developerName}</developer_name>\n    <update_contact>${updateContact}</update_contact>\n</component>`\n  return (\n    <div>\n      <Highlight language='xml'>{content}</Highlight>\n    </div>\n  )\n}\n\nexport default MetaInfo\n","import React, { useState } from 'react'\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { ProjectType } from './../../consts'\nimport CreateDesktopApp from './../projects/DesktopApp'\nimport MetaInfoTextArea from './../projects/MetaInfo'\n\nconst CreateProject = props => {\n  const [project, setProject] = useState({\n    id: '',\n    name: '',\n    summary: '',\n    description: '',\n    developerName: '',\n    updateContact: '',\n  })\n\n  const onChange = e => {\n    const name = e.target.name\n    const val = e.target.value\n    setProject({\n      ...project,\n      [name]: val\n    })\n  }\n\n  return (\n    <BrowserRouter>\n      <div className='row'>\n        <div className='col s6'>\n          <Switch>\n            <Route\n              path={`/new/${ProjectType.DesktopApp}`}\n              render={props => (\n                <CreateDesktopApp\n                  {...props}\n                  project={project}\n                  onChange={onChange}\n                />\n              )}\n            />\n          </Switch>\n        </div>\n        <div className='col s6'>\n          <MetaInfoTextArea type={ProjectType.DesktopApp} project={project} />\n        </div>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default CreateProject\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport Navbar from './components/layout/Navbar'\nimport HomePage from './components/pages/Home'\nimport CreateProjectPage from './components/pages/CreateProject'\n\nconst App = () => {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <Navbar />\n        <div style={{ marginTop: '40px' }}>\n          <Switch>\n            <Route exact path='/' component={HomePage} />\n            <Route path='/new' component={CreateProjectPage} />\n          </Switch>\n        </div>\n      </div>\n    </BrowserRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}