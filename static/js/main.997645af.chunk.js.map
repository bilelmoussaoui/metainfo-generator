{"version":3,"sources":["components/layout/Navbar.jsx","components/ProjectCard.jsx","consts.js","components/pages/Home.jsx","components/projects/Form.jsx","components/projects/Code.jsx","utils.js","components/pages/CreateProject.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","id","href","activeClassName","ProjectCard","props","name","type","description","ProjectType","Home","style","fontWeight","marginTop","marginBottom","language","MetaForm","onChange","projectType","project","placeholder","htmlFor","value","MetaCode","content","summary","developerName","updateContact","launchableURL","metadataLicense","projectLicense","doc","document","implementation","createDocument","componentElem","createElement","setAttribute","idElem","innerHTML","appendChild","metadataLicenseElem","projectLicenseElem","launchableElem","nameElem","summaryElem","descriptionElem","developerElem","updateContactElem","manifestXML","XMLSerializer","serializeToString","documentElement","format","collapseContent","projectToManifest","CreateProject","match","params","project_type","useState","setProject","e","target","val","App","basename","exact","path","component","HomePage","CreateProjectPage","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.997645af.chunk.js","sourcesContent":["import React from 'react'\nimport { Link, NavLink } from 'react-router-dom'\n\nconst Navbar = () => {\n  return (\n    <nav>\n      <div className='nav-wrapper indigo darken-4'>\n        <Link to='/' className='brand-logo'>\n          Metainfo Generator\n        </Link>\n        <ul id='nav-mobile' className='right hide-on-med-and-down'>\n          <li>\n            <a href='https://www.freedesktop.org/software/appstream/docs/'>\n              Specifications\n            </a>\n          </li>\n          <li>\n            <a href='https://github.com/bilelmoussaoui/metainfo-generator'>\n              Source Code\n            </a>\n          </li>\n          <li>\n            <NavLink activeClassName='active' to='/about'>About</NavLink>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  )\n}\n\nexport default Navbar\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst ProjectCard = props => {\n  const { name, type, description } = props\n  return (\n    <div className='col s12 m3'>\n      <div className='card small indigo'>\n        <div className='card-content white-text'>\n          <Link className='white-text' to={`/new/${type}`}>\n            <h3 className='card-title'>{name}</h3>\n          </Link>\n          <p>{description}</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectCard\n","export const ProjectType = {\n  DesktopApp: 'desktop-application',\n  CliApp: 'console-application',\n  WebApp: 'web-application',\n  Service: 'service',\n  Addon: 'addon',\n  IconTheme: 'icon-theme',\n  Codec: 'codec',\n  Driver: 'driver',\n  Runtime: 'runtime',\n  Localization: 'localization',\n  Font: 'font',\n  Firmware: 'firmware',\n  InputMethod: 'inputmethod',\n  OperatingSystem: 'operating-system',\n  Repository: 'repository',\n}\n","import React from 'react'\n\nimport ProjectCard from './../ProjectCard'\nimport { ProjectType } from './../../consts'\nimport Highlight from 'react-highlight.js'\n\nconst content = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Bilal Elmoussaoui 2019 <bilal.elmoussaoui@gnome.org> -->\n<component type=\"desktop-application\">\n  <id>org.gnome.design.Contrast</id>\n  <metadata_license>CC0</metadata_license>\n  <project_license>GPL-3.0+</project_license>\n  <name>Contrast</name>\n  <summary>Check contrast between two colors</summary>\n  <description>\n    <p>Contrast checks whether the contrast between two colors meet the WCAG requirements.</p>\n  </description>\n  <screenshots>\n    <screenshot type=\"default\">\n      <image>https://gitlab.gnome.org/World/design/contrast/raw/master/data/resources/screenshots/screenshot1.png</image>\n      <caption>Main Window</caption>\n    </screenshot>\n  </screenshots>\n  <url type=\"homepage\">https://gitlab.gnome.org/World/design/contrast</url>\n  <url type=\"bugtracker\">https://gitlab.gnome.org/World/design/contrast/issues</url>\n  <url type=\"donation\">https://liberapay.com/bielmoussaoui</url>\n  <url type=\"translate\">https://l10n.gnome.org/module/contrast/</url>\n  <content_rating type=\"oars-1.0\" />\n  <releases>\n    <release version=\"0.0.2\" date=\"2019-08-25\">\n      <description>\n        <p>Translations updates</p>\n      </description>\n    </release>\n    <release version=\"0.0.1\" date=\"2019-08-07\">\n      <description>\n        <p>First release of Contrast</p>\n      </description>\n    </release>\n  </releases>\n  <kudos>\n    <kudo>ModernToolkit</kudo>\n    <kudo>HiDpiIcon</kudo>\n  </kudos>\n  <developer_name>Bilal Elmoussaoui</developer_name>\n  <update_contact>bilal.elmoussaoui@gnome.org</update_contact>\n  <translation type=\"gettext\">contrast</translation>\n  <launchable type=\"desktop-id\">org.gnome.design.Contrast.desktop</launchable>\n</component>`\nconst Home = () => {\n  return (\n    <div className='container'>\n      <h3\n        style={{ fontWeight: '800', marginTop: '40px', marginBottom: '40px' }}\n        className='center-align'\n      >\n        What's a Metainfo file?\n      </h3>\n      <p>\n        AppStream is a cross-distro effort for enhancing the metadata available\n        about software components in the Linux and free-software ecosystem. One\n        of the project's goals is to make building software-center applications\n        possible, and make interaction with the package sources of a\n        distribution smarter. AppStream provides specifications for\n        meta-information which is shipped by upstream projects and can be\n        consumed by other software. The meta-information includes data which is\n        interesting to display in software centers and is mainly useful for\n        end-users, as well as descriptions about the public interfaces a\n        software component provides, which is mainly useful for developers,\n        3rd-party software installers and for automatically installing missing\n        components on a distribution, for example missing firmware or\n        mimetype-handlers.\n      </p>\n      A metainfo is usually installed under\n      <Highlight language='bash'>$prefix/$datadir/metainfo</Highlight>\n      <h3\n        style={{ fontWeight: '800', marginTop: '80px', marginBottom: '40px' }}\n        className='center-align'\n      >\n        Select a component\n      </h3>\n      <div>\n        <div className='row'>\n          <ProjectCard\n            name='Desktop Application'\n            type={ProjectType.DesktopApp}\n            description='A desktop application is an application which has a graphical user interface and is commonly used with mouse and keyboard. It also ships a Freedesktop .desktop file to be visible in application menus. '\n          />\n          <ProjectCard\n            name='CLI Application'\n            type={ProjectType.CliApp}\n            description='A console application is any application that has a command-line or text-based interface and is designed to be used by a human user on the command line.'\n          />\n          <ProjectCard\n            name='Web Application'\n            type={ProjectType.WebApp}\n            description='A web application is an application running remotely that is accessed via a web browser and built on the web platform. '\n          />\n          <ProjectCard\n            name='Service'\n            type={ProjectType.Service}\n            description='A service component is any software that is started and supervised by the Operating Systems \"init\" facility, such as systemd.'\n          />\n          <ProjectCard\n            name='Addon'\n            type={ProjectType.Addon}\n            description='Some components are not standalone, but rather extend existing software installed on the system and can only be used together with it. The addon component type exists to reflect that.'\n          />\n          <ProjectCard\n            name='Font'\n            type={ProjectType.Font}\n            description=' A software center can allow users to install additional fonts using font metadata'\n          />\n          <ProjectCard\n            name='Icon Theme'\n            type={ProjectType.IconTheme}\n            description='Icon themes as defined in the Freedesktop Icon Theme Specification can contain icon-theme metainfo files to be installed by software centers'\n          />\n          <ProjectCard\n            name='Codec'\n            type={ProjectType.Codec}\n            description='Software centers might want to special-case codec handling.'\n          />\n          <ProjectCard\n            name='Driver'\n            type={ProjectType.Driver}\n            description='The driver component type describes drivers for hardware devices as well as other Linux kernel drivers for e.g. virtualization support'\n          />\n          <ProjectCard\n            name='Localization'\n            type={ProjectType.Localization}\n            description='The localization component type describes language packs for individual software components or groups of software components'\n          />\n          <ProjectCard\n            name='Runtime'\n            type={ProjectType.Runtime}\n            description='Components of type runtime describe a collection of interdependent software components that are required to run other software'\n          />\n          <ProjectCard\n            name='Firmware'\n            type={ProjectType.Firmware}\n            description='Device firmware can be accompanied by AppStream upstream metadata, to be incorporated by a distribution. Tools like fwupd make use of this metadata to automatically update flashed firmware of devices found in the machine.'\n          />\n          <ProjectCard\n            name='Input Method'\n            type={ProjectType.InputMethod}\n            description='It is a nice feature for a software center to allows users the installation of additional input methods.'\n          />\n          <ProjectCard\n            name='Repository'\n            type={ProjectType.Repository}\n            description='A repository component describes a remote archive of digital content, usually other software or additional data (e.g. themes, icons, books, music, ...). Upon installation of a component of this type, the repective repository is added to the system and activated, letting the user access the new content.'\n          />\n\n          <ProjectCard\n            name='Operating System'\n            type={ProjectType.OperatingSystem}\n            description='The operating-system component type describes a whole operating system such as GNU/Linux distributions like Debian, Fedora, RHEL, etc. or Windows and macOS.'\n          />\n        </div>\n      </div>\n      <h3\n        style={{ fontWeight: '800', marginTop: '80px', marginBottom: '40px' }}\n        className='center-align'\n      >\n        Examples of metainfo files\n      </h3>\n      <Highlight language='xml'>{content}</Highlight>\n    </div>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport { ProjectType } from './../../consts'\n\nconst MetaForm = props => {\n  const { onChange, project } = props\n  const { projectType } = project\n\n  return (\n    <div className='row'>\n      <form className='col s12'>\n        <div className='row'>\n          <div className='input-field col s6'>\n            <input\n              placeholder='com.website.myapp'\n              type='text'\n              name='id'\n              onChange={onChange}\n            />\n            <label htmlFor='id'>ID</label>\n          </div>\n          <div className='input-field col s6'>\n            <input\n              placeholder='My App'\n              name='name'\n              type='text'\n              onChange={onChange}\n            />\n            <label htmlFor='name'>Name</label>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='col s6'>\n            <label htmlFor='metadataLicense'>Metadata License</label>\n            <select\n              className='browser-default'\n              name='metadataLicense'\n              onChange={onChange}\n            >\n              <option value='FSFAP'>FSFAP</option>\n              <option value='CC0-1.0'>CC0-1.0</option>\n              <option value='CC-BY-3.0'>CC-BY-3.0</option>\n              <option value='CC-BY-SA-3.0'>CC-BY-SA-3.0</option>\n              <option value='GFDL-1.3'>GFDL-1.3</option>\n              <option value='MIT'>MIT</option>\n            </select>\n          </div>\n          <div className='col s6'>\n            <label htmlFor='projectLicense'>Project License</label>\n            <select\n              className='browser-default'\n              name='projectLicense'\n              onChange={onChange}\n            >\n              <option value='GPL-2.0'>GPL-2.0</option>\n              <option value='LGPL-3.0+'>LGPL-3.0+</option>\n              <option value='GPL-3.0+'>GPL-3.0+</option>\n              <option value='MIT'>MIT</option>\n              <option value='CC-BY-SA-2.0 '>CC-BY-SA-2.0 </option>\n            </select>\n          </div>\n        </div>\n\n        {projectType === ProjectType.WebApp && (\n          <div className='row'>\n            <div className='input-field col s12'>\n              <input\n                placeholder='https://riot.com/app'\n                type='text'\n                name='launchableURL'\n                onChange={onChange}\n              />\n              <label htmlFor='launchableURL'>Web Application URL</label>\n            </div>\n          </div>\n        )}\n\n        <div className='row'>\n          <div className='input-field col s12'>\n            <textarea\n              name='summary'\n              className='materialize-textarea'\n              onChange={onChange}\n            />\n            <label htmlFor='summary'>Summary</label>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='input-field col s12'>\n            <textarea\n              name='description'\n              className='materialize-textarea'\n              onChange={onChange}\n            />\n            <label htmlFor='description'>Description</label>\n          </div>\n        </div>\n\n        <div className='row'>\n          <div className='input-field col s6'>\n            <input\n              placeholder='The name of the developer(s)'\n              type='text'\n              name='developerName'\n              onChange={onChange}\n            />\n            <label htmlFor='developerName'>Developer Name</label>\n          </div>\n          <div className='input-field col s6'>\n            <input\n              placeholder='update@email.me'\n              name='updateContact'\n              type='email'\n              onChange={onChange}\n            />\n            <label htmlFor='updateContact'>Update Contact</label>\n          </div>\n        </div>\n      </form>\n    </div>\n  )\n}\n\nexport default MetaForm\n","import React from 'react'\nimport Highlight from 'react-highlight.js'\nimport { projectToManifest } from './../../utils'\n\nconst MetaCode = props => {\n  const content = projectToManifest(props.project)\n  return (\n    <div>\n      <Highlight language='xml'>{content}</Highlight>\n    </div>\n  )\n}\n\nexport default MetaCode\n","import { ProjectType } from './consts'\nimport format from 'xml-formatter'\n\nexport const projectToManifest = project => {\n  const {\n    id,\n    name,\n    summary,\n    description,\n    developerName,\n    updateContact,\n    launchableURL,\n    metadataLicense,\n    projectLicense,\n    projectType\n  } = project\n\n  let doc = document.implementation.createDocument('', '', null)\n  let componentElem = doc.createElement('component')\n  componentElem.setAttribute('type', projectType)\n\n  let idElem = doc.createElement('id')\n  idElem.innerHTML = id\n  componentElem.appendChild(idElem)\n\n  let metadataLicenseElem = doc.createElement('metadata_license')\n  metadataLicenseElem.innerHTML = metadataLicense\n  componentElem.appendChild(metadataLicenseElem)\n\n  let projectLicenseElem = doc.createElement('project_license')\n  projectLicenseElem.innerHTML = projectLicense\n  componentElem.appendChild(projectLicenseElem)\n\n  let launchableElem = doc.createElement('launchable')\n  switch (projectType) {\n    case ProjectType.DesktopApp:\n      launchableElem.setAttribute('type', 'desktop-id')\n      launchableElem.innerHTML = `${id}.desktop`\n      componentElem.appendChild(launchableElem)\n      break\n    case ProjectType.WebApp:\n      launchableElem.setAttribute('type', 'url')\n      launchableElem.innerHTML = launchableURL\n      componentElem.appendChild(launchableElem)\n      break\n    default:\n      break\n  }\n\n  let nameElem = doc.createElement('name')\n  nameElem.innerHTML = name\n  componentElem.appendChild(nameElem)\n\n  let summaryElem = doc.createElement('summary')\n  summaryElem.innerHTML = summary\n  componentElem.appendChild(summaryElem)\n\n  if (description !== '') {\n    let descriptionElem = doc.createElement('description')\n    descriptionElem.innerHTML = description\n    componentElem.appendChild(descriptionElem)\n  }\n\n  if (developerName !== '') {\n    let developerElem = doc.createElement('developer_name')\n    developerElem.innerHTML = developerName\n    componentElem.appendChild(developerElem)\n  }\n\n  if (updateContact !== '') {\n    let updateContactElem = doc.createElement('update_contact')\n    updateContactElem.innerHTML = updateContact\n    componentElem.appendChild(updateContactElem)\n  }\n\n  doc.appendChild(componentElem)\n\n  let manifestXML = new XMLSerializer().serializeToString(doc.documentElement)\n  manifestXML = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>${manifestXML}`\n  return format(manifestXML, { collapseContent: true })\n}\n","import React, { useState } from 'react'\nimport { ProjectType } from './../../consts'\nimport MetaForm from './../projects/Form'\nimport MetaCode from './../projects/Code'\n\nconst CreateProject = props => {\n  const projectType = props.match.params.project_type\n\n  const [project, setProject] = useState({\n    id: '',\n    name: '',\n    summary: '',\n    description: '',\n    developerName: '',\n    updateContact: '',\n    launchableURL: '',\n    metadataLicense: '',\n    projectLicense: '',\n    projectType\n  })\n\n  const onChange = e => {\n    const name = e.target.name\n    const val = e.target.value\n    setProject({\n      ...project,\n      [name]: val\n    })\n  }\n  return (\n    <div className='row'>\n      <div className='col s6'>\n        <MetaForm {...props} project={project} onChange={onChange} />\n      </div>\n      <div className='col s6'>\n        <MetaCode project={project} />\n      </div>\n    </div>\n  )\n}\n\nexport default CreateProject\n","import React from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nimport Navbar from './components/layout/Navbar'\nimport HomePage from './components/pages/Home'\nimport CreateProjectPage from './components/pages/CreateProject'\n\nconst App = () => {\n  return (\n    <HashRouter basename='/'>\n      <div className='App'>\n        <Navbar />\n        <div style={{ marginTop: '40px' }}>\n          <Switch>\n            <Route exact path='/' component={HomePage} />\n            <Route path='/new/:project_type' component={CreateProjectPage} />\n          </Switch>\n        </div>\n      </div>\n    </HashRouter>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}